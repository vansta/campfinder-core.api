// <auto-generated />
using System;
using CampFinder.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CampFinder.DbContext.Migrations
{
    [DbContext(typeof(CampFinderDbContext))]
    [Migration("20210121181741_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("CampFinder.Models.CampPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountPersons")
                        .HasColumnType("int");

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Forest")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Person_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Place_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Person_Id");

                    b.HasIndex("Place_Id");

                    b.ToTable("CampPlaces");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CampPlace");
                });

            modelBuilder.Entity("CampFinder.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("CampFinder.Models.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Accessibility")
                        .HasColumnType("float");

                    b.Property<string>("AccessibilityNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("CampFinder.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampPlaceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CampPlace_Id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CampPlaceId");

                    b.HasIndex("PersonId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("CampFinder.Models.Building", b =>
                {
                    b.HasBaseType("CampFinder.Models.CampPlace");

                    b.Property<bool>("Beds")
                        .HasColumnType("bit");

                    b.Property<int>("DaySpaces")
                        .HasColumnType("int");

                    b.Property<int>("Dormitories")
                        .HasColumnType("int");

                    b.Property<bool>("KitchenGear")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Building");
                });

            modelBuilder.Entity("CampFinder.Models.Terrain", b =>
                {
                    b.HasBaseType("CampFinder.Models.CampPlace");

                    b.Property<bool>("Electricity")
                        .HasColumnType("bit");

                    b.Property<bool>("Toilets")
                        .HasColumnType("bit");

                    b.Property<bool>("Water")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Terrain");
                });

            modelBuilder.Entity("CampFinder.Models.CampPlace", b =>
                {
                    b.HasOne("CampFinder.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_Id");

                    b.HasOne("CampFinder.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("Place_Id");

                    b.Navigation("Person");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("CampFinder.Models.Review", b =>
                {
                    b.HasOne("CampFinder.Models.CampPlace", "CampPlace")
                        .WithMany("Reviews")
                        .HasForeignKey("CampPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CampFinder.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("CampPlace");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CampFinder.Models.CampPlace", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
